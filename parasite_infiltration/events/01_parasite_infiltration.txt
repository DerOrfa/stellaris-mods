###############################################################
# Events for parasite infiltration parasite_inf.xx + parasite_inf.200 #
###############################################################

namespace = parasite_inf

# initialize parasite event chain on mars (aka the only terraforming candidate  in sol)
country_event = {
	id = parasite_inf.1
	hide_window = yes
	fire_only_once = yes 
	is_triggered_only = yes
	
	trigger = {
		NOR = {
			is_hive_empire = yes
			is_machine_empire = yes
		}
	}
	
	immediate = {
		random_system_within_border = {
			limit = { has_star_flag = sol_system }
			random_system_planet = {
				limit = {
					OR = {
						has_modifier = terraforming_candidate
						has_planet_flag = martiancolony # compatibility with mod "colony on mars"
					}
				} 
				save_event_target_as = parasite_planet
				#clear any station around the planet
				FROMFROM = { 
					every_owned_ship = {
						limit = { 
							exists = orbit 
							is_ship_class = shipclass_mining_station
							orbit = { is_same_value = event_target:parasite_planet }
						}
						orbit = { log = "Removing [Prev.GetName] orbiting [This.GetName] to make place for lotus station" }
						delete_ship = This
					}
				}
				FROMFROM = { country_event = { id = parasite_inf.2 days = 3 random = 1 } }
			}	
		}
		
	}
}

# parasite temple discovered creates temple and special project
country_event = {
	id = parasite_inf.2
	is_triggered_only = yes
	fire_only_once = yes 

	title = "parasite_inf.2.name"
	desc = "parasite_inf.2.desc"
	picture = GFX_evt_alien_nature
	show_sound = event_alien_nature
	location = event_target:parasite_planet

	option = {
		name = CURIOUS
		hidden_effect = { 
			event_target:parasite_planet = {
				set_planet_flag = parasite_temple
			}
		}
		enable_special_project = {
			name = "PARASITE_TEMPLE_INVESTIGATE"
			location = event_target:parasite_planet
			owner = this
		}

	}
	option = {
		name = NOTIME
	}
}

# entered temple
ship_event = {
	id = parasite_inf.5
	is_triggered_only = yes
	fire_only_once = yes 
	
	title = "parasite_inf.5.name"
	desc = "parasite_inf.5.desc"
	picture = GFX_evt_big_landing_ship
	show_sound = event_alien_nature
	location = this

	option = {
		name = parasite_inf.5.a
		custom_tooltip = parasite_inf.5.a.desc

		hidden_effect = {
			event_target:parasite_planet = {
				clear_deposits = yes
				add_deposit = ancient_lotus_temple_station
			}
			ship_event = { id = parasite_inf.6 days = 4 random = 1 } 
		}
	}
	option = {
		name = parasite_inf.5.b
		custom_tooltip = parasite_inf.5.b.desc
	}
}
#returned from the temple
ship_event = {
	id = parasite_inf.6
	is_triggered_only = yes
	fire_only_once = yes 
	
	title = "parasite_inf.6.name"
	desc = "parasite_inf.6.desc" #todo have a different text when research station is already there
	picture = GFX_evt_big_landing_ship
	show_sound = event_alien_nature
	location = this

	option = {
		name = EXCELLENT
		leader = { 
			set_timed_leader_flag = { flag = has_gained_level_trait days = 20 }
			add_experience = 500
			add_trait = leader_trait_expertise_statecraft 
			add_ruler_trait = trait_ruler_charismatic
			add_trait = leader_trait_resilient 
			set_leader_flag = parasite_leader
			
			create_species = {
				name = "lotus_touched.name"
				plural = "lotus_touched.plural"
				class = this
				portrait = this
				traits = {
					trait="trait_decadent"
					trait="trait_intelligent"
					trait="trait_charismatic"
					trait="trait_natural_sociologists"
					trait="trait_rapid_breeders"
				}
				homeworld = home_planet
			}
			last_created_species = { 
				save_event_target_as = lotus_touched_species 
				set_species_flag = parasite_speciation_1
				if = { limit = { has_global_flag = lotus_portrait_loaded }
					change_species_portrait = lotus
				}
			}
		}
		hidden_effect = {
			owner = { 
				country_event = { id = parasite_inf.300 days = @PARASITE_SPECIATION1_TIME random = @PARASITE_SPECIATION1_RND } #start timer for speciation
			} 
		}
	}
}

#a talented science leader is generated by the station
# bug will sometimes not show up in the leader screen untill you opened that twice
ship_event = {
	id = parasite_inf.20
	hide_window = yes
	
	trigger = {
		is_ship_class = shipclass_research_station
		orbit = { has_planet_flag = parasite_temple }
	}
	
	mean_time_to_happen = { 
		months = @PARASITE_TALENT_MTTH_MONTHS 
		modifier = { # reduce rate after first trigger
				factor = 5
				has_ship_flag = talent_triggered
		}
	}
	immediate = { 
		ship_event = { id = parasite_inf.30 days = 15 random = 15 } 	#start timer for extending station after first created leader
		ship_event = { id = parasite_inf.22 }
		set_ship_flag = talent_triggered
	}
}
ship_event = {
	id = parasite_inf.22
	is_triggered_only = yes
	title = "anomaly.4055.name"
	desc = "parasite_inf.22.desc"
	picture = GFX_evt_physics_research
	show_sound = event_laboratory_sound
	location = this
	
	trigger = { # only if we still use the station as a science station
		owner = { NOT = { has_policy_flag = parasite_station_education_full } }
	}
	
	immediate = { owner = { save_event_target_as = parasite_country } } #needed for make_leader_parasite below

	option = {
		name = parasite_inf.22.a
		owner = {
			create_leader = {
				class = scientist
				species = owner_main_species
				name = random
				skill = 3
				leader_age_min = 20
				leader_age_max = 30
				effect = {
					make_leader_parasite = yes
				}
			}
		}
	}
	option = {
		name = anomaly.4055.b
		hidden_effect = {
			#todo add some effect
		}
	}
}

# event to extend station (this will make all new leaders parasite leaders)
ship_event = {
	id = parasite_inf.30
	is_triggered_only = yes
	fire_only_once = yes
	hide_window = yes

	immediate = { 
		owner = { country_event = { id = parasite_inf.32 } }
	}
}
country_event = {
	id = parasite_inf.32
	is_triggered_only = yes
	title = "parasite_inf.32.name"
	desc = "parasite_inf.32.desc"
	picture = GFX_evt_physics_research
	show_sound = event_laboratory_sound
	location = FROM
	fire_only_once = yes
	
	immediate = {
		set_country_flag = parasite_station_extended #open option to educate leaders on the station
	}
	
	option = {
		name = parasite_inf.32.a
		custom_tooltip = parasite_inf.32.a.desc
		ai_chance = {
			factor = 150
			modifier = {
				factor = 4
				has_ethic = ethic_authoritarian
			}
			modifier = {
				factor = 8
				has_ethic = ethic_fanatic_authoritarian
			}
		}
		set_policy = {
			policy = parasite_station
			option = parasite_station_education_full
			cooldown = yes
		}

	}
	option = {
		name = parasite_inf.32.b
		ai_chance = {
			factor = 100
			modifier = {
				factor = 4
				has_ethic = ethic_egalitarian
			}
			modifier = {
				factor = 8
				has_ethic = ethic_fanatic_egalitarian
			}
		}
	}
	option = {
		name = parasite_inf.32.c
		FROM = { orbit = {
			remove_deposit = ancient_lotus_temple 
			remove_planet_flag = parasite_temple
		} }
		ai_chance = {
			factor = 100
			modifier = {
				factor = 2
				has_ethic = ethic_egalitarian
			}
			modifier = {
				factor = 4
				has_ethic = ethic_fanatic_egalitarian
			} 
			modifier = {
				factor = 0.75
				OR = { 
					has_ethic = ethic_authoritarian 
					has_ethic = ethic_xenophile
				}
			}
			modifier = {
				factor = 0.5
				OR = {
					has_ethic = ethic_fanatic_authoritarian 
					has_ethic = ethic_fanatic_xenophile
				}
			}
			modifier = {
				factor = 5
				has_ethic = ethic_xenophobe
			}
			modifier = {
				factor = 10
				has_ethic = ethic_fanatic_xenophobe
			}
		}
	}
}

## if we centralized our education under the influence of the parasite temple

# if a leader was created the normal way - change him to be a parasite leader
# scope: country, from: leader
country_event = {
	id = parasite_inf.40
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		has_policy_flag = parasite_station_education_full
	}

	immediate = {
		save_event_target_as = parasite_country #needed for make_leader_parasite below
		FROM = { make_leader_parasite = yes }
	}
}

#make non-parasite leaders have "accidents"
country_event = {
	id = parasite_inf.50
	hide_window = yes
	
	mean_time_to_happen = { 
		months = @PARASITE_ASN_MTTH_MONTHS 
		modifier = { # much less likely if is parasite station is just for research
				factor = 8
				NOT = { has_policy_flag = parasite_station_education_full }
		}
		modifier = { # reduce rate after speciation
			factor = 2
			has_country_flag = parasite_speciation_1
		}

	}

	trigger = {
		has_country_flag = parasite_station_extended
	}

	immediate = {
		random_list = { 
			75 = {
				modifier = { #skip if there are no non-parasite leaders in the pool anymore
					factor = 0
					count_pool_leader = { limit = { is_parasite_leader = no } count < 1 }
				}
				random_pool_leader = {
					limit = { is_parasite_leader = no }
					save_event_target_as = accident_leader
					random_list = { 
						50 = { #leader is killed
							log = "Assassination attempt on pooled [This.GetName] from [Root.GetName] succeded"
							kill_leader = { show_notification = no }
						} 
						25 = { #survives and becomes shaken 
							log = "Assassination attempt on pooled [This.GetName] from [Root.GetName] made shaken"
							make_leader_shaken = yes
						} 
						25 = { #survives
							log = "Assassination attempt on pooled [This.GetName] from [Root.GetName] failed"
						} 
					}
				}
			}
			25 ={
				random_owned_leader = {
					limit = { is_parasite_leader = no }
					weights = {
						base = 10
						modifier = { # rulers are better protected
							mult = 0.5
							leader_class = ruler
						}
					}
					save_event_target_as = accident_leader
					log = "Assassination attempt on owned [This.GetName] from [Root.GetName]"
					random_list = { 
						33 = { #leader is killed
							owner = { country_event = { id=parasite_inf.60 } } #kill'n'tell
						} 
						33 = { #survives and becomes shaken
							owner = { country_event = { id=parasite_inf.65 } } #not-kill'n'tell
						} 
						33 = { #survives
							log = "Assassination attempt on owned [This.GetName] from [Root.GetName] failed"
						} 
					}
				}
			}
		}
	}
}

#kill'n'tell
country_event = { 
	id = parasite_inf.60
	is_triggered_only = yes
	title = "parasite_inf.60.name"
	picture = GFX_evt_exploding_ship
	show_sound = event_ship_explosion

	immediate = {
		event_target:accident_leader = { replace_leader = yes }
	}

	desc = {
		trigger = { NOT = { exists = event_target:assignment } }
		text = "parasite_inf.60.noassignment"
	}	
	desc = {
		trigger = { exists = event_target:assignment }
		text = "parasite_inf.60.assignment"
	}
	
	#replacement exists and we want that
	option = {
		name = "parasite_inf.60.a"
		trigger = { exists = event_target:assignment }
		event_target:accident_leader = { kill_leader = { show_notification = no } }
		
		custom_tooltip = "parasite_inf.60.a.desc"

		activate_saved_leader = {
			key = replacement
			effect = {
				make_leader_parasite = yes
				event_target:assignment = {
					assign_leader = PREV
				}
			}
		}
	}
	#replacement rejected
	option = {
		name =  "parasite_inf.60.b"
		trigger = { exists = event_target:assignment }
		
		event_target:accident_leader = { kill_leader = { show_notification = no } }

		if = { limit = { exists = event_target:assignment}		
			remove_saved_leader = replacement
		}
	}
	#replacement not available
	option = {
		name =  TERRIBLE
		trigger = { NOT = { exists = event_target:assignment } }
		
		event_target:accident_leader = { kill_leader = { show_notification = no } }

		if = { limit = { exists = event_target:assignment}		
			remove_saved_leader = replacement
		}
	}
}

#not-kill'n'tell
country_event = { 
	id = parasite_inf.65
	is_triggered_only = yes
	title = "parasite_inf.65.name"
	desc = "parasite_inf.65.desc"
	picture = GFX_evt_exploding_ship
	show_sound = event_ship_explosion

	option = {
		name = WORRYING
		event_target:accident_leader = { make_leader_shaken = yes }
	}
}

# parasite leader became ruler
country_event = {
	id = parasite_inf.200
	is_triggered_only = yes
	hide_window = yes
	
	trigger = { 
		exists = ruler
		ruler = {
			is_parasite_leader = yes
		}
	}
	
} 

# first speciation
country_event = {
	id = parasite_inf.300
	is_triggered_only = yes
	fire_only_once = yes 
	
	title = "parasite_inf.300.name"
	desc = "parasite_inf.300.desc"
	picture = GFX_evt_alien_propaganda
	show_sound = event_mystic_reveal
	#event_public_unrest
	
	trigger = {
			is_country_type = default
			NOT = { has_ethic = ethic_gestalt_consciousness }
	}
	
	immediate = {
		set_country_flag = parasite_speciation_1
	}

	option = {
		name = FASCINATING
		#reveal all leaders
		every_owned_leader = {
			limit = { has_leader_flag = parasite_leader }
			change_species = event_target:lotus_touched_species
			remove_leader_flag = parasite_leader #this is not needed anymore
		}
		every_pool_leader = {
			limit = { has_leader_flag = parasite_leader }
			change_species = event_target:lotus_touched_species
			remove_leader_flag = parasite_leader #this is not needed anymore
		}
		
		#"reveal" pops on planets
		every_owned_planet = { 
			
			if = { 
				limit = {
					OR = {
						sector = {# if the governor is parasite he has put parasites in strategic positions
							exists = leader
							leader = { is_parasite_leader = yes }
						}
						owner = { ruler = { is_parasite_leader = yes } }# same if the ruler is parasite 
					}
				}
				every_owned_pop = {
					limit = {
						OR = {
							is_pop_category = ruler
							has_job = enforcer
						}
						planet = { is_same_value = PREVPREV }
					}
					change_species = event_target:lotus_touched_species
					hidden_effect = { pop_change_ethic = ethic_authoritarian }
				}
			}
			else = { # otherwise its a bit random
				random_pop = {
					limit = {
						is_pop_category = ruler
					}
					change_species = event_target:lotus_touched_species
					hidden_effect = { pop_change_ethic = ethic_authoritarian }
				}
				random_pop = {
					limit = {
						is_pop_category = specialist
					}
					change_species = event_target:lotus_touched_species
					hidden_effect = { pop_change_ethic = ethic_authoritarian }
				}
			}
		}
	}
}

#if a lotus touched is born before takeover make them autoritarian
planet_event = {
	id = parasite_inf.301
	is_triggered_only = yes
	hide_window = yes
	
	trigger = {
		FROMFROM = { species = { has_species_flag = parasite_speciation_1 } }
	}
	immediate = { FROMFROM = { pop_change_ethic = ethic_authoritarian } }
}

# an unemployed non-parasite pop attacks government
planet_event = {
	id = parasite_inf.350
	title = parasite_inf.350.name
	desc = parasite_inf.350.desc
	picture = GFX_evt_burning_settlement
	show_sound = event_air_raid_siren
	location = THIS

	trigger = {
		NOT = { has_planet_flag = recent_unrest_event }
		any_pop = {	
			NOT = { species = { has_species_flag = parasite_speciation_1 } }
			has_job = unemployed
			is_pop_category = specialist 
		}
		exists = owner
		owner = {
			has_country_flag = parasite_speciation_1
		}
		exists = controller
		controller = { is_same_value = root.owner }
		has_ground_combat = no
		has_orbital_bombardment = no
	}
	
	mean_time_to_happen = { months = @UNEMPLOYED_ATTACK_MTTH_MONTHS }
	
	immediate = {
		set_timed_planet_flag = {
			flag = recent_unrest_event
			days = @UNEMPLOYED_ATTACK_COOLDOWN
		}
		if = { limit = { has_modifier = authoritarian_unrest } #remove prevous
			remove_modifier = authoritarian_unrest
		}
		planet_event = { id = parasite_inf.360 days = 50 random = 10 } #trigger event to ask for reeducation
	}
	#if there is no leader
	option = {
		trigger = { 
			sector = {
				NOT = { exists = leader }
			}
		}
		name = TERRIBLE
		add_planet_devastation = 15
		add_modifier = {
			modifier = authoritarian_unrest
			days = 3600 # 10 years
		}
		random_pop = {	
			limit = { 
				is_parasite_pop = no
				has_job = unemployed
				is_pop_category = specialist
			}
			kill_pop = yes
		}
	}
	# if the governor is parasite the attackers are defeated
	option = {
		trigger = {
			sector = {
				exists = leader
				leader = { is_parasite_leader = yes }
			}
		}
		name = TERRIBLE
		add_planet_devastation = 5
		add_modifier = {
			modifier = authoritarian_unrest
			days = 3600 # 10 years
		}
		random_pop = {	
			limit = { 
				is_parasite_pop = no
				has_job = unemployed
				is_pop_category = specialist
			}
			kill_pop = yes
		}
	}
	# if the governor is not parasite he is killed 
	option = {
		trigger = { 
			sector = {
				exists = leader
				leader = { is_parasite_leader = no }
			}
		}
		name = TERRIBLE
		add_planet_devastation = 15
		add_modifier = {
			modifier = authoritarian_unrest
			days = 3600 # 10 years
		}
		random_pop = {	
			limit = { 
				is_parasite_pop = no
				has_job = unemployed
				is_pop_category = specialist
			}
			kill_pop = yes
		}
		sector = {
			leader = { kill_leader = { show_notification = no } }
		}
	}
}
planet_event = {
	id = parasite_inf.360
	title = parasite_inf.360.name
	desc = parasite_inf.360.desc
	picture = GFX_evt_arguing_senate
	is_triggered_only = yes
	location = THIS
	
	trigger = {
		sector = {# if the governor is (still) parasite 
			exists = leader
			leader = { is_parasite_leader = yes }
		}
		NOT = { has_modifier = planet_reeducation }
	}
	
	immediate = {
		sector = {# get the govenor 
			if = { limit = { exists = leader }
				leader = { save_event_target_as = reeducation_leader }
			}
		}
	}
	
	option = {
		name = OK
		add_modifier = { modifier = "planet_reeducation" days = -1 }
	}
	
	option = {
		name = parasite_inf.360.b
	}
}

# the parasite faction is formed
pop_faction_event = {
	id = parasite_inf.400
	title = factions.1.title
	desc =  parasite_inf.400.desc

	picture = GFX_evt_galactic_senate
	show_sound = event_factions

	is_triggered_only = yes
	
	option = {
		name = OK
		trigger = { owner = {
			exists = ruler 
			ruler = { species = { has_species_flag = parasite_speciation_1 }  }
		} } 
		assign_leader = owner.ruler
	}
	option = {
		name = OK
		trigger = { owner = {
			NOT = { 
				exists = ruler 
				ruler = { species = { has_species_flag = parasite_speciation_1 } }
			}
		} } 
	}
	after = {
		owner = {
			every_owned_planet = {
				every_owned_pop = {
					force_faction_evaluation = yes
				}
			}
		}
	}
}
#pop in reeducation is reeducated
planet_event = {
	id = parasite_inf.450
	hide_window = yes

	trigger = {
		any_pop = { OR = {
				has_job = reeducation 
				has_job = ruler_reeducation 
		} }
	}

	mean_time_to_happen = { months = @REEDUCATION_MTTH_MONTHS }

	immediate = {
		random_pop = { 
			limit = { OR = {
				has_job = reeducation 
				has_job = ruler_reeducation 
			}}   
			random_list = {
				80 = {#success pops class is cleared (aka demoted)
					clear_pop_category = yes
					pop_change_ethic = ethic_authoritarian
					set_pop_flag = reeducated
					log = "pop successfuly reeducated on [From.GetName]"
				}
				20 = { # some "dissapear"
					log = "reeducated pop dies on [From.GetName]"
					kill_pop = yes
				}
			}
		}
	}
}

planet_event = {
	id = parasite_inf.500
	title = parasite_inf.500
	desc =  parasite_inf.500.desc
	is_triggered_only = yes
	
	immediate = {
		get_parasite_species = yes

		owner = { save_event_target_as = parasite_infiltrated }
	}

	option = {
		name = "parasite_inf.500.a"
		create_rebels = {
			name = "Lotus Cult"
			species = event_target:lotus_touched_species
			authority="auth_oligarchic"
			ethos = {
				ethic="ethic_authoritarian"
				ethic="ethic_xenophobe"
				ethic="ethic_spiritualist"
			}
			civics={
				civic="civic_exalted_priesthood"
				civic="civic_mining_guilds"
			}
			effect = {
				log = "parasite state [This.GetName] startet"
				save_event_target_as = parasite_infiltration
				#clean out existing leaders
				every_owned_leader = {kill_leader = { show_notification = no }}
				root = {
					owner = {
						every_relation = {
							limit = { has_communications = prev }
							establish_communications_no_message = event_target:parasite_infiltration
						}
						ruler = {
							if = { limit = { is_parasite_leader = yes }
								log = "making [This.GetName] ruler of [parasite_infiltration.GetName]"
								parasite_clone_leader = yes
								event_target:parasite_infiltration = { assign_leader = last_created_leader }
								kill_leader = { show_notification = no }
							}
						}
#						add_opinion_modifier = { makes lotus cult not like originator because they broke away
#							who = event_target:parasite_infiltration
#							modifier = opinion_broke_away 
#						}
						#parasite leaders defect to lotus cult (taking their fleets with them)
						every_owned_leader = {
							limit = { is_parasite_leader = yes }
							parasite_clone_leader = yes
							if = { limit = { exists = event_target:assignment_fleet }
								event_target:assignment_fleet = { 
									set_owner = event_target:parasite_infiltration
								}
								last_created_leader = { event_target:assignment_fleet = { 
									assign_leader =  PREV 
									print_scope_effect = yes
								} }
							}
							kill_leader = { show_notification = no }
						}
					}
				}
			}
		}

		hidden_effect = { 
			#one defence army switches sides when ruler or enforcer is parasite
			if = { limit = { any_pop = { OR = {
					is_pop_category = ruler
					has_job = enforcer
				} } }
				random_planet_army = {
					limit = { NOT = { army_type = local_resistance_army } }
					log = "[parasite_infiltration.GetName] replacing [This.GetName]"
					remove_army = yes
					PREV = {
						create_army = {
							name = "Lotus Cult Infiltrators"
							owner = event_target:parasite_infiltration
							species = event_target:parasite_infiltration
							type = "assault_army"
						}
					}
				}
			}
			#create resistance army per egalitarian pop
			every_owned_pop = { limit = { 
					has_ethic = ethic_egalitarian
					NOT = { is_exact_same_species = event_target:lotus_touched_species }
					NOT = { has_pop_flag = reeducated }
				}
				planet = {
					log = "creating resistance for [parasite_infiltrated.GetName] from [Prev.GetName] on [This.GetName]"
					create_army = {
						name = "NAME_Freedom_Fighters"
						owner = event_target:parasite_infiltrated
						species = PREV
						type = "local_resistance_army"
					}
				}
			}
			#create normal army per reeducated pop
			every_owned_pop = { limit = { has_pop_flag = reeducated }
				planet = { 
					log = "creating army for [parasite_infiltration.GetName] from [Prev.GetName] on [This.GetName]"
					create_army = {
						owner = event_target:parasite_infiltration
						species = PREV
						type = "assault_army"
					}
				}
			}
			#create infiltrator army per parasite pop
			every_owned_pop = { limit = { is_exact_same_species = event_target:lotus_touched_species }
				planet = { 
					log = "creating infiltrator for [parasite_infiltration.GetName] from [Prev.GetName] on [This.GetName]"
					create_army = {
						owner = event_target:parasite_infiltration
						species = PREV
						type = "parasite_infiltrator_army"
					}
				}
			}
		}
	}
}


# planet has been terraformed 
# From = Terraforming country
planet_event = {
	id = parasite_inf.900
	is_triggered_only = yes
	hide_window = yes
	
	trigger = {
		has_planet_flag = parasite_temple
	}
	immediate = { 
		add_deposit = ancient_lotus_temple
	}
}

